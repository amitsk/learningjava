apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'project-report'
apply plugin: 'ru.d10xa.allure'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath "ru.d10xa:gradle-allure-plugin:0.5.1"
    }
}

apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoHtml"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //TODO - extract versions to constants
    compile(
            'org.slf4j:slf4j-api:1.7.21',
            "com.sparkjava:spark-core:2.5",
            'com.amazonaws:aws-lambda-java-core:1.1.0',
            'com.amazonaws:aws-lambda-java-events:1.3.0',
            'org.apache.logging.log4j:log4j-api:2.6.1',
            'org.apache.logging.log4j:log4j-core:2.6.1',
            'org.apache.logging.log4j:log4j-slf4j-impl:2.6.2',
            'com.lmax:disruptor:3.3.4'    //For using Async loggers
    )

    testCompile('junit:junit:4.12',
            'org.assertj:assertj-core:3.3.0',
            'org.mockito:mockito-all:2.0.2-beta',
            'com.tngtech.java:junit-dataprovider:1.10.4')
}

tasks.withType(org.gradle.api.tasks.testing.Test) {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

test {
    maxParallelForks = 1
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport
}

task calculator(type: JavaExec) {
    dependsOn = ["classes"]
    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
    main = "com.bitbucket.learningjava.hotelratecalculator.Main"
}

allure {
    aspectjweaver = true

    junit = true
    testNG = false
    spock = false
    geb = false

    allureResultsDir = "$buildDir/allure-results"
    allureReportDir = "$buildDir/allure-report"

    allureVersion = "1.4.22"
    aspectjVersion = "1.8.9"
}

shadowJar {
    dependencies {
        exclude(dependency('com.sparkjava:spark-core'))
    }
}